<?php
/**
 * SolanaOwnershipChange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoPlus Security API Document
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SolanaOwnershipChange Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SolanaOwnershipChange implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SolanaOwnershipChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mint' => 'string',
        'symbol' => 'string',
        'post_owner' => 'string',
        'decimals' => 'int',
        'name' => 'string',
        'pre_owner' => 'string',
        'owner_changed' => 'string',
        'risky_post_owner' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mint' => null,
        'symbol' => null,
        'post_owner' => null,
        'decimals' => 'int32',
        'name' => null,
        'pre_owner' => null,
        'owner_changed' => null,
        'risky_post_owner' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mint' => 'mint',
        'symbol' => 'symbol',
        'post_owner' => 'post_owner',
        'decimals' => 'decimals',
        'name' => 'name',
        'pre_owner' => 'pre_owner',
        'owner_changed' => 'owner_changed',
        'risky_post_owner' => 'risky_post_owner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mint' => 'setMint',
        'symbol' => 'setSymbol',
        'post_owner' => 'setPostOwner',
        'decimals' => 'setDecimals',
        'name' => 'setName',
        'pre_owner' => 'setPreOwner',
        'owner_changed' => 'setOwnerChanged',
        'risky_post_owner' => 'setRiskyPostOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mint' => 'getMint',
        'symbol' => 'getSymbol',
        'post_owner' => 'getPostOwner',
        'decimals' => 'getDecimals',
        'name' => 'getName',
        'pre_owner' => 'getPreOwner',
        'owner_changed' => 'getOwnerChanged',
        'risky_post_owner' => 'getRiskyPostOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mint'] = isset($data['mint']) ? $data['mint'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['post_owner'] = isset($data['post_owner']) ? $data['post_owner'] : null;
        $this->container['decimals'] = isset($data['decimals']) ? $data['decimals'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pre_owner'] = isset($data['pre_owner']) ? $data['pre_owner'] : null;
        $this->container['owner_changed'] = isset($data['owner_changed']) ? $data['owner_changed'] : null;
        $this->container['risky_post_owner'] = isset($data['risky_post_owner']) ? $data['risky_post_owner'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mint
     *
     * @return string
     */
    public function getMint()
    {
        return $this->container['mint'];
    }

    /**
     * Sets mint
     *
     * @param string $mint mint
     *
     * @return $this
     */
    public function setMint($mint)
    {
        $this->container['mint'] = $mint;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets post_owner
     *
     * @return string
     */
    public function getPostOwner()
    {
        return $this->container['post_owner'];
    }

    /**
     * Sets post_owner
     *
     * @param string $post_owner post_owner
     *
     * @return $this
     */
    public function setPostOwner($post_owner)
    {
        $this->container['post_owner'] = $post_owner;

        return $this;
    }

    /**
     * Gets decimals
     *
     * @return int
     */
    public function getDecimals()
    {
        return $this->container['decimals'];
    }

    /**
     * Sets decimals
     *
     * @param int $decimals decimals
     *
     * @return $this
     */
    public function setDecimals($decimals)
    {
        $this->container['decimals'] = $decimals;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pre_owner
     *
     * @return string
     */
    public function getPreOwner()
    {
        return $this->container['pre_owner'];
    }

    /**
     * Sets pre_owner
     *
     * @param string $pre_owner pre_owner
     *
     * @return $this
     */
    public function setPreOwner($pre_owner)
    {
        $this->container['pre_owner'] = $pre_owner;

        return $this;
    }

    /**
     * Gets owner_changed
     *
     * @return string
     */
    public function getOwnerChanged()
    {
        return $this->container['owner_changed'];
    }

    /**
     * Sets owner_changed
     *
     * @param string $owner_changed owner_changed
     *
     * @return $this
     */
    public function setOwnerChanged($owner_changed)
    {
        $this->container['owner_changed'] = $owner_changed;

        return $this;
    }

    /**
     * Gets risky_post_owner
     *
     * @return int
     */
    public function getRiskyPostOwner()
    {
        return $this->container['risky_post_owner'];
    }

    /**
     * Sets risky_post_owner
     *
     * @param int $risky_post_owner risky_post_owner
     *
     * @return $this
     */
    public function setRiskyPostOwner($risky_post_owner)
    {
        $this->container['risky_post_owner'] = $risky_post_owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
