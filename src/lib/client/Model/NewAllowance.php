<?php
/**
 * NewAllowance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoPlus Security API Document
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NewAllowance Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewAllowance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NewAllowance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner' => 'string',
        'post_amount' => 'string',
        'allowance_change' => 'string',
        'spender' => 'string',
        'risky_spender' => 'int',
        'pre_amount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner' => null,
        'post_amount' => null,
        'allowance_change' => null,
        'spender' => null,
        'risky_spender' => 'int32',
        'pre_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'owner' => 'owner',
        'post_amount' => 'post_amount',
        'allowance_change' => 'allowance_change',
        'spender' => 'spender',
        'risky_spender' => 'risky_spender',
        'pre_amount' => 'pre_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'owner' => 'setOwner',
        'post_amount' => 'setPostAmount',
        'allowance_change' => 'setAllowanceChange',
        'spender' => 'setSpender',
        'risky_spender' => 'setRiskySpender',
        'pre_amount' => 'setPreAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'owner' => 'getOwner',
        'post_amount' => 'getPostAmount',
        'allowance_change' => 'getAllowanceChange',
        'spender' => 'getSpender',
        'risky_spender' => 'getRiskySpender',
        'pre_amount' => 'getPreAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['post_amount'] = isset($data['post_amount']) ? $data['post_amount'] : null;
        $this->container['allowance_change'] = isset($data['allowance_change']) ? $data['allowance_change'] : null;
        $this->container['spender'] = isset($data['spender']) ? $data['spender'] : null;
        $this->container['risky_spender'] = isset($data['risky_spender']) ? $data['risky_spender'] : null;
        $this->container['pre_amount'] = isset($data['pre_amount']) ? $data['pre_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets post_amount
     *
     * @return string
     */
    public function getPostAmount()
    {
        return $this->container['post_amount'];
    }

    /**
     * Sets post_amount
     *
     * @param string $post_amount post_amount
     *
     * @return $this
     */
    public function setPostAmount($post_amount)
    {
        $this->container['post_amount'] = $post_amount;

        return $this;
    }

    /**
     * Gets allowance_change
     *
     * @return string
     */
    public function getAllowanceChange()
    {
        return $this->container['allowance_change'];
    }

    /**
     * Sets allowance_change
     *
     * @param string $allowance_change allowance_change
     *
     * @return $this
     */
    public function setAllowanceChange($allowance_change)
    {
        $this->container['allowance_change'] = $allowance_change;

        return $this;
    }

    /**
     * Gets spender
     *
     * @return string
     */
    public function getSpender()
    {
        return $this->container['spender'];
    }

    /**
     * Sets spender
     *
     * @param string $spender spender
     *
     * @return $this
     */
    public function setSpender($spender)
    {
        $this->container['spender'] = $spender;

        return $this;
    }

    /**
     * Gets risky_spender
     *
     * @return int
     */
    public function getRiskySpender()
    {
        return $this->container['risky_spender'];
    }

    /**
     * Sets risky_spender
     *
     * @param int $risky_spender risky_spender
     *
     * @return $this
     */
    public function setRiskySpender($risky_spender)
    {
        $this->container['risky_spender'] = $risky_spender;

        return $this;
    }

    /**
     * Gets pre_amount
     *
     * @return string
     */
    public function getPreAmount()
    {
        return $this->container['pre_amount'];
    }

    /**
     * Sets pre_amount
     *
     * @param string $pre_amount pre_amount
     *
     * @return $this
     */
    public function setPreAmount($pre_amount)
    {
        $this->container['pre_amount'] = $pre_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
