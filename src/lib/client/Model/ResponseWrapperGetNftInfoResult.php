<?php
/**
 * ResponseWrapperGetNftInfoResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoPlus Security API Document
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseWrapperGetNftInfoResult Class Doc Comment
 *
 * @category Class
 * @description Response result
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseWrapperGetNftInfoResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseWrapperGetNftInfo_result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'traded_volume_24h' => 'float',
'total_volume' => 'float',
'red_check_mark' => 'int',
'nft_proxy' => 'int',
'restricted_approval' => 'int',
'highest_price' => 'float',
'transfer_without_approval' => '\Swagger\Client\Model\ResponseWrapperGetNftInfoResultTransferWithoutApproval',
'discord_url' => 'string',
'nft_open_source' => 'int',
'privileged_minting' => '\Swagger\Client\Model\ResponseWrapperGetNftInfoResultPrivilegedMinting',
'nft_owner_number' => 'int',
'trust_list' => 'int',
'token_id' => 'string',
'lowest_price_24h' => 'float',
'average_price_24h' => 'float',
'nft_erc' => 'string',
'creator_address' => 'string',
'medium_url' => 'string',
'malicious_nft_contract' => 'int',
'privileged_burn' => '\Swagger\Client\Model\ResponseWrapperGetNftInfoResultPrivilegedBurn',
'twitter_url' => 'string',
'nft_symbol' => 'string',
'nft_description' => 'string',
'self_destruct' => '\Swagger\Client\Model\ResponseWrapperGetNftInfoResultSelfDestruct',
'metadata_frozen' => 'int',
'token_owner' => 'string',
'nft_verified' => 'int',
'same_nfts' => '\Swagger\Client\Model\ResponseWrapperGetNftInfoResultSameNfts[]',
'nft_items' => 'int',
'oversupply_minting' => 'int',
'nft_name' => 'string',
'website_url' => 'string',
'github_url' => 'string',
'telegram_url' => 'string',
'sales_24h' => 'float',
'create_block_number' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'traded_volume_24h' => null,
'total_volume' => null,
'red_check_mark' => 'int32',
'nft_proxy' => 'int32',
'restricted_approval' => 'int32',
'highest_price' => null,
'transfer_without_approval' => null,
'discord_url' => null,
'nft_open_source' => 'int32',
'privileged_minting' => null,
'nft_owner_number' => 'int64',
'trust_list' => 'int32',
'token_id' => null,
'lowest_price_24h' => null,
'average_price_24h' => null,
'nft_erc' => null,
'creator_address' => null,
'medium_url' => null,
'malicious_nft_contract' => 'int32',
'privileged_burn' => null,
'twitter_url' => null,
'nft_symbol' => null,
'nft_description' => null,
'self_destruct' => null,
'metadata_frozen' => 'int32',
'token_owner' => null,
'nft_verified' => 'int32',
'same_nfts' => null,
'nft_items' => 'int64',
'oversupply_minting' => 'int32',
'nft_name' => null,
'website_url' => null,
'github_url' => null,
'telegram_url' => null,
'sales_24h' => null,
'create_block_number' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'traded_volume_24h' => 'traded_volume_24h',
'total_volume' => 'total_volume',
'red_check_mark' => 'red_check_mark',
'nft_proxy' => 'nft_proxy',
'restricted_approval' => 'restricted_approval',
'highest_price' => 'highest_price',
'transfer_without_approval' => 'transfer_without_approval',
'discord_url' => 'discord_url',
'nft_open_source' => 'nft_open_source',
'privileged_minting' => 'privileged_minting',
'nft_owner_number' => 'nft_owner_number',
'trust_list' => 'trust_list',
'token_id' => 'token_id',
'lowest_price_24h' => 'lowest_price_24h',
'average_price_24h' => 'average_price_24h',
'nft_erc' => 'nft_erc',
'creator_address' => 'creator_address',
'medium_url' => 'medium_url',
'malicious_nft_contract' => 'malicious_nft_contract',
'privileged_burn' => 'privileged_burn',
'twitter_url' => 'twitter_url',
'nft_symbol' => 'nft_symbol',
'nft_description' => 'nft_description',
'self_destruct' => 'self_destruct',
'metadata_frozen' => 'metadata_frozen',
'token_owner' => 'token_owner',
'nft_verified' => 'nft_verified',
'same_nfts' => 'same_nfts',
'nft_items' => 'nft_items',
'oversupply_minting' => 'oversupply_minting',
'nft_name' => 'nft_name',
'website_url' => 'website_url',
'github_url' => 'github_url',
'telegram_url' => 'telegram_url',
'sales_24h' => 'sales_24h',
'create_block_number' => 'create_block_number'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'traded_volume_24h' => 'setTradedVolume24h',
'total_volume' => 'setTotalVolume',
'red_check_mark' => 'setRedCheckMark',
'nft_proxy' => 'setNftProxy',
'restricted_approval' => 'setRestrictedApproval',
'highest_price' => 'setHighestPrice',
'transfer_without_approval' => 'setTransferWithoutApproval',
'discord_url' => 'setDiscordUrl',
'nft_open_source' => 'setNftOpenSource',
'privileged_minting' => 'setPrivilegedMinting',
'nft_owner_number' => 'setNftOwnerNumber',
'trust_list' => 'setTrustList',
'token_id' => 'setTokenId',
'lowest_price_24h' => 'setLowestPrice24h',
'average_price_24h' => 'setAveragePrice24h',
'nft_erc' => 'setNftErc',
'creator_address' => 'setCreatorAddress',
'medium_url' => 'setMediumUrl',
'malicious_nft_contract' => 'setMaliciousNftContract',
'privileged_burn' => 'setPrivilegedBurn',
'twitter_url' => 'setTwitterUrl',
'nft_symbol' => 'setNftSymbol',
'nft_description' => 'setNftDescription',
'self_destruct' => 'setSelfDestruct',
'metadata_frozen' => 'setMetadataFrozen',
'token_owner' => 'setTokenOwner',
'nft_verified' => 'setNftVerified',
'same_nfts' => 'setSameNfts',
'nft_items' => 'setNftItems',
'oversupply_minting' => 'setOversupplyMinting',
'nft_name' => 'setNftName',
'website_url' => 'setWebsiteUrl',
'github_url' => 'setGithubUrl',
'telegram_url' => 'setTelegramUrl',
'sales_24h' => 'setSales24h',
'create_block_number' => 'setCreateBlockNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'traded_volume_24h' => 'getTradedVolume24h',
'total_volume' => 'getTotalVolume',
'red_check_mark' => 'getRedCheckMark',
'nft_proxy' => 'getNftProxy',
'restricted_approval' => 'getRestrictedApproval',
'highest_price' => 'getHighestPrice',
'transfer_without_approval' => 'getTransferWithoutApproval',
'discord_url' => 'getDiscordUrl',
'nft_open_source' => 'getNftOpenSource',
'privileged_minting' => 'getPrivilegedMinting',
'nft_owner_number' => 'getNftOwnerNumber',
'trust_list' => 'getTrustList',
'token_id' => 'getTokenId',
'lowest_price_24h' => 'getLowestPrice24h',
'average_price_24h' => 'getAveragePrice24h',
'nft_erc' => 'getNftErc',
'creator_address' => 'getCreatorAddress',
'medium_url' => 'getMediumUrl',
'malicious_nft_contract' => 'getMaliciousNftContract',
'privileged_burn' => 'getPrivilegedBurn',
'twitter_url' => 'getTwitterUrl',
'nft_symbol' => 'getNftSymbol',
'nft_description' => 'getNftDescription',
'self_destruct' => 'getSelfDestruct',
'metadata_frozen' => 'getMetadataFrozen',
'token_owner' => 'getTokenOwner',
'nft_verified' => 'getNftVerified',
'same_nfts' => 'getSameNfts',
'nft_items' => 'getNftItems',
'oversupply_minting' => 'getOversupplyMinting',
'nft_name' => 'getNftName',
'website_url' => 'getWebsiteUrl',
'github_url' => 'getGithubUrl',
'telegram_url' => 'getTelegramUrl',
'sales_24h' => 'getSales24h',
'create_block_number' => 'getCreateBlockNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['traded_volume_24h'] = isset($data['traded_volume_24h']) ? $data['traded_volume_24h'] : null;
        $this->container['total_volume'] = isset($data['total_volume']) ? $data['total_volume'] : null;
        $this->container['red_check_mark'] = isset($data['red_check_mark']) ? $data['red_check_mark'] : null;
        $this->container['nft_proxy'] = isset($data['nft_proxy']) ? $data['nft_proxy'] : null;
        $this->container['restricted_approval'] = isset($data['restricted_approval']) ? $data['restricted_approval'] : null;
        $this->container['highest_price'] = isset($data['highest_price']) ? $data['highest_price'] : null;
        $this->container['transfer_without_approval'] = isset($data['transfer_without_approval']) ? $data['transfer_without_approval'] : null;
        $this->container['discord_url'] = isset($data['discord_url']) ? $data['discord_url'] : null;
        $this->container['nft_open_source'] = isset($data['nft_open_source']) ? $data['nft_open_source'] : null;
        $this->container['privileged_minting'] = isset($data['privileged_minting']) ? $data['privileged_minting'] : null;
        $this->container['nft_owner_number'] = isset($data['nft_owner_number']) ? $data['nft_owner_number'] : null;
        $this->container['trust_list'] = isset($data['trust_list']) ? $data['trust_list'] : null;
        $this->container['token_id'] = isset($data['token_id']) ? $data['token_id'] : null;
        $this->container['lowest_price_24h'] = isset($data['lowest_price_24h']) ? $data['lowest_price_24h'] : null;
        $this->container['average_price_24h'] = isset($data['average_price_24h']) ? $data['average_price_24h'] : null;
        $this->container['nft_erc'] = isset($data['nft_erc']) ? $data['nft_erc'] : null;
        $this->container['creator_address'] = isset($data['creator_address']) ? $data['creator_address'] : null;
        $this->container['medium_url'] = isset($data['medium_url']) ? $data['medium_url'] : null;
        $this->container['malicious_nft_contract'] = isset($data['malicious_nft_contract']) ? $data['malicious_nft_contract'] : null;
        $this->container['privileged_burn'] = isset($data['privileged_burn']) ? $data['privileged_burn'] : null;
        $this->container['twitter_url'] = isset($data['twitter_url']) ? $data['twitter_url'] : null;
        $this->container['nft_symbol'] = isset($data['nft_symbol']) ? $data['nft_symbol'] : null;
        $this->container['nft_description'] = isset($data['nft_description']) ? $data['nft_description'] : null;
        $this->container['self_destruct'] = isset($data['self_destruct']) ? $data['self_destruct'] : null;
        $this->container['metadata_frozen'] = isset($data['metadata_frozen']) ? $data['metadata_frozen'] : null;
        $this->container['token_owner'] = isset($data['token_owner']) ? $data['token_owner'] : null;
        $this->container['nft_verified'] = isset($data['nft_verified']) ? $data['nft_verified'] : null;
        $this->container['same_nfts'] = isset($data['same_nfts']) ? $data['same_nfts'] : null;
        $this->container['nft_items'] = isset($data['nft_items']) ? $data['nft_items'] : null;
        $this->container['oversupply_minting'] = isset($data['oversupply_minting']) ? $data['oversupply_minting'] : null;
        $this->container['nft_name'] = isset($data['nft_name']) ? $data['nft_name'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['github_url'] = isset($data['github_url']) ? $data['github_url'] : null;
        $this->container['telegram_url'] = isset($data['telegram_url']) ? $data['telegram_url'] : null;
        $this->container['sales_24h'] = isset($data['sales_24h']) ? $data['sales_24h'] : null;
        $this->container['create_block_number'] = isset($data['create_block_number']) ? $data['create_block_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets traded_volume_24h
     *
     * @return float
     */
    public function getTradedVolume24h()
    {
        return $this->container['traded_volume_24h'];
    }

    /**
     * Sets traded_volume_24h
     *
     * @param float $traded_volume_24h It describes the trading volume of the NFT in 24h.
     *
     * @return $this
     */
    public function setTradedVolume24h($traded_volume_24h)
    {
        $this->container['traded_volume_24h'] = $traded_volume_24h;

        return $this;
    }

    /**
     * Gets total_volume
     *
     * @return float
     */
    public function getTotalVolume()
    {
        return $this->container['total_volume'];
    }

    /**
     * Sets total_volume
     *
     * @param float $total_volume It describes the total volume of the NFT.
     *
     * @return $this
     */
    public function setTotalVolume($total_volume)
    {
        $this->container['total_volume'] = $total_volume;

        return $this;
    }

    /**
     * Gets red_check_mark
     *
     * @return int
     */
    public function getRedCheckMark()
    {
        return $this->container['red_check_mark'];
    }

    /**
     * Sets red_check_mark
     *
     * @param int $red_check_mark red check mark
     *
     * @return $this
     */
    public function setRedCheckMark($red_check_mark)
    {
        $this->container['red_check_mark'] = $red_check_mark;

        return $this;
    }

    /**
     * Gets nft_proxy
     *
     * @return int
     */
    public function getNftProxy()
    {
        return $this->container['nft_proxy'];
    }

    /**
     * Sets nft_proxy
     *
     * @param int $nft_proxy It describes whether this NFT contract has a proxy contract.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:(1) When \"is_open_source\": \"0\", it will return \"null\". (2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)
     *
     * @return $this
     */
    public function setNftProxy($nft_proxy)
    {
        $this->container['nft_proxy'] = $nft_proxy;

        return $this;
    }

    /**
     * Gets restricted_approval
     *
     * @return int
     */
    public function getRestrictedApproval()
    {
        return $this->container['restricted_approval'];
    }

    /**
     * Sets restricted_approval
     *
     * @param int $restricted_approval It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX. \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)
     *
     * @return $this
     */
    public function setRestrictedApproval($restricted_approval)
    {
        $this->container['restricted_approval'] = $restricted_approval;

        return $this;
    }

    /**
     * Gets highest_price
     *
     * @return float
     */
    public function getHighestPrice()
    {
        return $this->container['highest_price'];
    }

    /**
     * Sets highest_price
     *
     * @param float $highest_price It describes the highest price of the NFT.
     *
     * @return $this
     */
    public function setHighestPrice($highest_price)
    {
        $this->container['highest_price'] = $highest_price;

        return $this;
    }

    /**
     * Gets transfer_without_approval
     *
     * @return \Swagger\Client\Model\ResponseWrapperGetNftInfoResultTransferWithoutApproval
     */
    public function getTransferWithoutApproval()
    {
        return $this->container['transfer_without_approval'];
    }

    /**
     * Sets transfer_without_approval
     *
     * @param \Swagger\Client\Model\ResponseWrapperGetNftInfoResultTransferWithoutApproval $transfer_without_approval transfer_without_approval
     *
     * @return $this
     */
    public function setTransferWithoutApproval($transfer_without_approval)
    {
        $this->container['transfer_without_approval'] = $transfer_without_approval;

        return $this;
    }

    /**
     * Gets discord_url
     *
     * @return string
     */
    public function getDiscordUrl()
    {
        return $this->container['discord_url'];
    }

    /**
     * Sets discord_url
     *
     * @param string $discord_url It describes the discord url of the NFT. Return “null” means there is no discord url or didn't find the discord url.
     *
     * @return $this
     */
    public function setDiscordUrl($discord_url)
    {
        $this->container['discord_url'] = $discord_url;

        return $this;
    }

    /**
     * Gets nft_open_source
     *
     * @return int
     */
    public function getNftOpenSource()
    {
        return $this->container['nft_open_source'];
    }

    /**
     * Sets nft_open_source
     *
     * @param int $nft_open_source It describes whether this contract is open source.  \"1\" means true;  \"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)
     *
     * @return $this
     */
    public function setNftOpenSource($nft_open_source)
    {
        $this->container['nft_open_source'] = $nft_open_source;

        return $this;
    }

    /**
     * Gets privileged_minting
     *
     * @return \Swagger\Client\Model\ResponseWrapperGetNftInfoResultPrivilegedMinting
     */
    public function getPrivilegedMinting()
    {
        return $this->container['privileged_minting'];
    }

    /**
     * Sets privileged_minting
     *
     * @param \Swagger\Client\Model\ResponseWrapperGetNftInfoResultPrivilegedMinting $privileged_minting privileged_minting
     *
     * @return $this
     */
    public function setPrivilegedMinting($privileged_minting)
    {
        $this->container['privileged_minting'] = $privileged_minting;

        return $this;
    }

    /**
     * Gets nft_owner_number
     *
     * @return int
     */
    public function getNftOwnerNumber()
    {
        return $this->container['nft_owner_number'];
    }

    /**
     * Sets nft_owner_number
     *
     * @param int $nft_owner_number It describes the holders of the NFT.
     *
     * @return $this
     */
    public function setNftOwnerNumber($nft_owner_number)
    {
        $this->container['nft_owner_number'] = $nft_owner_number;

        return $this;
    }

    /**
     * Gets trust_list
     *
     * @return int
     */
    public function getTrustList()
    {
        return $this->container['trust_list'];
    }

    /**
     * Sets trust_list
     *
     * @param int $trust_list It describes whether the NFT is a famous and trustworthy one. \"1\" means true;  Return \"null\" means no result.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy NFT. (2) Return \"null\" doesn't mean it is risky.Th)
     *
     * @return $this
     */
    public function setTrustList($trust_list)
    {
        $this->container['trust_list'] = $trust_list;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string $token_id token_id
     *
     * @return $this
     */
    public function setTokenId($token_id)
    {
        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets lowest_price_24h
     *
     * @return float
     */
    public function getLowestPrice24h()
    {
        return $this->container['lowest_price_24h'];
    }

    /**
     * Sets lowest_price_24h
     *
     * @param float $lowest_price_24h It describes the lowest price of the NFT in 24h.
     *
     * @return $this
     */
    public function setLowestPrice24h($lowest_price_24h)
    {
        $this->container['lowest_price_24h'] = $lowest_price_24h;

        return $this;
    }

    /**
     * Gets average_price_24h
     *
     * @return float
     */
    public function getAveragePrice24h()
    {
        return $this->container['average_price_24h'];
    }

    /**
     * Sets average_price_24h
     *
     * @param float $average_price_24h It describes the average price of the NFT in 24h.
     *
     * @return $this
     */
    public function setAveragePrice24h($average_price_24h)
    {
        $this->container['average_price_24h'] = $average_price_24h;

        return $this;
    }

    /**
     * Gets nft_erc
     *
     * @return string
     */
    public function getNftErc()
    {
        return $this->container['nft_erc'];
    }

    /**
     * Sets nft_erc
     *
     * @param string $nft_erc It describes the ERC protocol of the NFT. Example: \"nft_erc\": \"erc721\"
     *
     * @return $this
     */
    public function setNftErc($nft_erc)
    {
        $this->container['nft_erc'] = $nft_erc;

        return $this;
    }

    /**
     * Gets creator_address
     *
     * @return string
     */
    public function getCreatorAddress()
    {
        return $this->container['creator_address'];
    }

    /**
     * Sets creator_address
     *
     * @param string $creator_address It describes the creator address of the NFT. Example: \"creator_address\": \"0x1ee0af784b96bb55ece98c9b15675726b0da1b6b\"; Return “null” means that we didn't find the creator address.
     *
     * @return $this
     */
    public function setCreatorAddress($creator_address)
    {
        $this->container['creator_address'] = $creator_address;

        return $this;
    }

    /**
     * Gets medium_url
     *
     * @return string
     */
    public function getMediumUrl()
    {
        return $this->container['medium_url'];
    }

    /**
     * Sets medium_url
     *
     * @param string $medium_url It describes the medium url of the NFT. Return “null” means there is no medium url or didn't find the medium url.
     *
     * @return $this
     */
    public function setMediumUrl($medium_url)
    {
        $this->container['medium_url'] = $medium_url;

        return $this;
    }

    /**
     * Gets malicious_nft_contract
     *
     * @return int
     */
    public function getMaliciousNftContract()
    {
        return $this->container['malicious_nft_contract'];
    }

    /**
     * Sets malicious_nft_contract
     *
     * @param int $malicious_nft_contract It describes whether this NFT has performed malicious behaviors. \"1\" means true; \"0\" means false.(Notice:Malicious behaviors include random additions, blacklist abuse, falsified transactions, and other high-risk behaviors. Interacting with NFTs flagged as Malicious may contain a high level of risk)
     *
     * @return $this
     */
    public function setMaliciousNftContract($malicious_nft_contract)
    {
        $this->container['malicious_nft_contract'] = $malicious_nft_contract;

        return $this;
    }

    /**
     * Gets privileged_burn
     *
     * @return \Swagger\Client\Model\ResponseWrapperGetNftInfoResultPrivilegedBurn
     */
    public function getPrivilegedBurn()
    {
        return $this->container['privileged_burn'];
    }

    /**
     * Sets privileged_burn
     *
     * @param \Swagger\Client\Model\ResponseWrapperGetNftInfoResultPrivilegedBurn $privileged_burn privileged_burn
     *
     * @return $this
     */
    public function setPrivilegedBurn($privileged_burn)
    {
        $this->container['privileged_burn'] = $privileged_burn;

        return $this;
    }

    /**
     * Gets twitter_url
     *
     * @return string
     */
    public function getTwitterUrl()
    {
        return $this->container['twitter_url'];
    }

    /**
     * Sets twitter_url
     *
     * @param string $twitter_url It describes the twitter url of the NFT. Return “null” means there is no twitter url or didn't find the twitter url.
     *
     * @return $this
     */
    public function setTwitterUrl($twitter_url)
    {
        $this->container['twitter_url'] = $twitter_url;

        return $this;
    }

    /**
     * Gets nft_symbol
     *
     * @return string
     */
    public function getNftSymbol()
    {
        return $this->container['nft_symbol'];
    }

    /**
     * Sets nft_symbol
     *
     * @param string $nft_symbol nft_symbol
     *
     * @return $this
     */
    public function setNftSymbol($nft_symbol)
    {
        $this->container['nft_symbol'] = $nft_symbol;

        return $this;
    }

    /**
     * Gets nft_description
     *
     * @return string
     */
    public function getNftDescription()
    {
        return $this->container['nft_description'];
    }

    /**
     * Sets nft_description
     *
     * @param string $nft_description It describes the introduction of the NFT. Return “null” means there is no description of the NFT.
     *
     * @return $this
     */
    public function setNftDescription($nft_description)
    {
        $this->container['nft_description'] = $nft_description;

        return $this;
    }

    /**
     * Gets self_destruct
     *
     * @return \Swagger\Client\Model\ResponseWrapperGetNftInfoResultSelfDestruct
     */
    public function getSelfDestruct()
    {
        return $this->container['self_destruct'];
    }

    /**
     * Sets self_destruct
     *
     * @param \Swagger\Client\Model\ResponseWrapperGetNftInfoResultSelfDestruct $self_destruct self_destruct
     *
     * @return $this
     */
    public function setSelfDestruct($self_destruct)
    {
        $this->container['self_destruct'] = $self_destruct;

        return $this;
    }

    /**
     * Gets metadata_frozen
     *
     * @return int
     */
    public function getMetadataFrozen()
    {
        return $this->container['metadata_frozen'];
    }

    /**
     * Sets metadata_frozen
     *
     * @param int $metadata_frozen metadata_frozen
     *
     * @return $this
     */
    public function setMetadataFrozen($metadata_frozen)
    {
        $this->container['metadata_frozen'] = $metadata_frozen;

        return $this;
    }

    /**
     * Gets token_owner
     *
     * @return string
     */
    public function getTokenOwner()
    {
        return $this->container['token_owner'];
    }

    /**
     * Sets token_owner
     *
     * @param string $token_owner token_owner
     *
     * @return $this
     */
    public function setTokenOwner($token_owner)
    {
        $this->container['token_owner'] = $token_owner;

        return $this;
    }

    /**
     * Gets nft_verified
     *
     * @return int
     */
    public function getNftVerified()
    {
        return $this->container['nft_verified'];
    }

    /**
     * Sets nft_verified
     *
     * @param int $nft_verified It describes whether the NFT is verified. \"1\" means that the NFT is verified; \"0\" means that we did not find any information about whether the NFT is verified.
     *
     * @return $this
     */
    public function setNftVerified($nft_verified)
    {
        $this->container['nft_verified'] = $nft_verified;

        return $this;
    }

    /**
     * Gets same_nfts
     *
     * @return \Swagger\Client\Model\ResponseWrapperGetNftInfoResultSameNfts[]
     */
    public function getSameNfts()
    {
        return $this->container['same_nfts'];
    }

    /**
     * Sets same_nfts
     *
     * @param \Swagger\Client\Model\ResponseWrapperGetNftInfoResultSameNfts[] $same_nfts It describes the info of other NFTs with duplicate name and symbol.
     *
     * @return $this
     */
    public function setSameNfts($same_nfts)
    {
        $this->container['same_nfts'] = $same_nfts;

        return $this;
    }

    /**
     * Gets nft_items
     *
     * @return int
     */
    public function getNftItems()
    {
        return $this->container['nft_items'];
    }

    /**
     * Sets nft_items
     *
     * @param int $nft_items It describes the numbers of the NFT.
     *
     * @return $this
     */
    public function setNftItems($nft_items)
    {
        $this->container['nft_items'] = $nft_items;

        return $this;
    }

    /**
     * Gets oversupply_minting
     *
     * @return int
     */
    public function getOversupplyMinting()
    {
        return $this->container['oversupply_minting'];
    }

    /**
     * Sets oversupply_minting
     *
     * @param int $oversupply_minting It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract — the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)
     *
     * @return $this
     */
    public function setOversupplyMinting($oversupply_minting)
    {
        $this->container['oversupply_minting'] = $oversupply_minting;

        return $this;
    }

    /**
     * Gets nft_name
     *
     * @return string
     */
    public function getNftName()
    {
        return $this->container['nft_name'];
    }

    /**
     * Sets nft_name
     *
     * @param string $nft_name nft_name
     *
     * @return $this
     */
    public function setNftName($nft_name)
    {
        $this->container['nft_name'] = $nft_name;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url It describes the website url of the NFT. Return “null” means there is no website url or didn't find the website url.
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets github_url
     *
     * @return string
     */
    public function getGithubUrl()
    {
        return $this->container['github_url'];
    }

    /**
     * Sets github_url
     *
     * @param string $github_url It describes the github url of the NFT. Return “null” means there is no github url or didn't find the github url.
     *
     * @return $this
     */
    public function setGithubUrl($github_url)
    {
        $this->container['github_url'] = $github_url;

        return $this;
    }

    /**
     * Gets telegram_url
     *
     * @return string
     */
    public function getTelegramUrl()
    {
        return $this->container['telegram_url'];
    }

    /**
     * Sets telegram_url
     *
     * @param string $telegram_url It describes the telegram url of the NFT. Return “null” means there is no telegram url or didn't find the telegram url.
     *
     * @return $this
     */
    public function setTelegramUrl($telegram_url)
    {
        $this->container['telegram_url'] = $telegram_url;

        return $this;
    }

    /**
     * Gets sales_24h
     *
     * @return float
     */
    public function getSales24h()
    {
        return $this->container['sales_24h'];
    }

    /**
     * Sets sales_24h
     *
     * @param float $sales_24h It describes the sales of the NFT in 24h.
     *
     * @return $this
     */
    public function setSales24h($sales_24h)
    {
        $this->container['sales_24h'] = $sales_24h;

        return $this;
    }

    /**
     * Gets create_block_number
     *
     * @return int
     */
    public function getCreateBlockNumber()
    {
        return $this->container['create_block_number'];
    }

    /**
     * Sets create_block_number
     *
     * @param int $create_block_number It describes the number of blocks created for the NFT. Return “null” means that we didn't find the number of blocks created for the NFT.
     *
     * @return $this
     */
    public function setCreateBlockNumber($create_block_number)
    {
        $this->container['create_block_number'] = $create_block_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
