<?php
/**
 * ResponseWrapperSolanaTokenSecurityResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoPlus Security API Document
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseWrapperSolanaTokenSecurityResult Class Doc Comment
 *
 * @category Class
 * @description key is contract address
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseWrapperSolanaTokenSecurityResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseWrapperSolanaTokenSecurity_result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'metadata' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMetadata',
        'creators' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityCreators[]',
        'lp_holders' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityLpHolders[]',
        'closable' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityClosable',
        'transfer_hook' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferHook[]',
        'transfer_hook_upgradable' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferHookUpgradable',
        'trusted_token' => 'int',
        'default_account_state_upgradable' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable',
        'none_transferable' => 'string',
        'default_account_state' => 'string',
        'mintable' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMintable',
        'balance_mutable_authority' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority',
        'transfer_fee' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferFee',
        'holders' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityHolders[]',
        'freezable' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityFreezable',
        'metadata_mutable' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMetadataMutable',
        'dex' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDex[]',
        'transfer_fee_upgradable' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'metadata' => null,
        'creators' => null,
        'lp_holders' => null,
        'closable' => null,
        'transfer_hook' => null,
        'transfer_hook_upgradable' => null,
        'trusted_token' => 'int32',
        'default_account_state_upgradable' => null,
        'none_transferable' => null,
        'default_account_state' => null,
        'mintable' => null,
        'balance_mutable_authority' => null,
        'transfer_fee' => null,
        'holders' => null,
        'freezable' => null,
        'metadata_mutable' => null,
        'dex' => null,
        'transfer_fee_upgradable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'metadata' => 'metadata',
        'creators' => 'creators',
        'lp_holders' => 'lp_holders',
        'closable' => 'closable',
        'transfer_hook' => 'transfer_hook',
        'transfer_hook_upgradable' => 'transfer_hook_upgradable',
        'trusted_token' => 'trusted_token',
        'default_account_state_upgradable' => 'default_account_state_upgradable',
        'none_transferable' => 'none_transferable',
        'default_account_state' => 'default_account_state',
        'mintable' => 'mintable',
        'balance_mutable_authority' => 'balance_mutable_authority',
        'transfer_fee' => 'transfer_fee',
        'holders' => 'holders',
        'freezable' => 'freezable',
        'metadata_mutable' => 'metadata_mutable',
        'dex' => 'dex',
        'transfer_fee_upgradable' => 'transfer_fee_upgradable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'metadata' => 'setMetadata',
        'creators' => 'setCreators',
        'lp_holders' => 'setLpHolders',
        'closable' => 'setClosable',
        'transfer_hook' => 'setTransferHook',
        'transfer_hook_upgradable' => 'setTransferHookUpgradable',
        'trusted_token' => 'setTrustedToken',
        'default_account_state_upgradable' => 'setDefaultAccountStateUpgradable',
        'none_transferable' => 'setNoneTransferable',
        'default_account_state' => 'setDefaultAccountState',
        'mintable' => 'setMintable',
        'balance_mutable_authority' => 'setBalanceMutableAuthority',
        'transfer_fee' => 'setTransferFee',
        'holders' => 'setHolders',
        'freezable' => 'setFreezable',
        'metadata_mutable' => 'setMetadataMutable',
        'dex' => 'setDex',
        'transfer_fee_upgradable' => 'setTransferFeeUpgradable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'metadata' => 'getMetadata',
        'creators' => 'getCreators',
        'lp_holders' => 'getLpHolders',
        'closable' => 'getClosable',
        'transfer_hook' => 'getTransferHook',
        'transfer_hook_upgradable' => 'getTransferHookUpgradable',
        'trusted_token' => 'getTrustedToken',
        'default_account_state_upgradable' => 'getDefaultAccountStateUpgradable',
        'none_transferable' => 'getNoneTransferable',
        'default_account_state' => 'getDefaultAccountState',
        'mintable' => 'getMintable',
        'balance_mutable_authority' => 'getBalanceMutableAuthority',
        'transfer_fee' => 'getTransferFee',
        'holders' => 'getHolders',
        'freezable' => 'getFreezable',
        'metadata_mutable' => 'getMetadataMutable',
        'dex' => 'getDex',
        'transfer_fee_upgradable' => 'getTransferFeeUpgradable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['creators'] = isset($data['creators']) ? $data['creators'] : null;
        $this->container['lp_holders'] = isset($data['lp_holders']) ? $data['lp_holders'] : null;
        $this->container['closable'] = isset($data['closable']) ? $data['closable'] : null;
        $this->container['transfer_hook'] = isset($data['transfer_hook']) ? $data['transfer_hook'] : null;
        $this->container['transfer_hook_upgradable'] = isset($data['transfer_hook_upgradable']) ? $data['transfer_hook_upgradable'] : null;
        $this->container['trusted_token'] = isset($data['trusted_token']) ? $data['trusted_token'] : null;
        $this->container['default_account_state_upgradable'] = isset($data['default_account_state_upgradable']) ? $data['default_account_state_upgradable'] : null;
        $this->container['none_transferable'] = isset($data['none_transferable']) ? $data['none_transferable'] : null;
        $this->container['default_account_state'] = isset($data['default_account_state']) ? $data['default_account_state'] : null;
        $this->container['mintable'] = isset($data['mintable']) ? $data['mintable'] : null;
        $this->container['balance_mutable_authority'] = isset($data['balance_mutable_authority']) ? $data['balance_mutable_authority'] : null;
        $this->container['transfer_fee'] = isset($data['transfer_fee']) ? $data['transfer_fee'] : null;
        $this->container['holders'] = isset($data['holders']) ? $data['holders'] : null;
        $this->container['freezable'] = isset($data['freezable']) ? $data['freezable'] : null;
        $this->container['metadata_mutable'] = isset($data['metadata_mutable']) ? $data['metadata_mutable'] : null;
        $this->container['dex'] = isset($data['dex']) ? $data['dex'] : null;
        $this->container['transfer_fee_upgradable'] = isset($data['transfer_fee_upgradable']) ? $data['transfer_fee_upgradable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets metadata
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets creators
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityCreators[]
     */
    public function getCreators()
    {
        return $this->container['creators'];
    }

    /**
     * Sets creators
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityCreators[] $creators Contains information about the token creators.
     *
     * @return $this
     */
    public function setCreators($creators)
    {
        $this->container['creators'] = $creators;

        return $this;
    }

    /**
     * Gets lp_holders
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityLpHolders[]
     */
    public function getLpHolders()
    {
        return $this->container['lp_holders'];
    }

    /**
     * Sets lp_holders
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityLpHolders[] $lp_holders List of top10 liquidity holders and their balances of the largest main token(SOL, USDC, USDT) liquidity pool.
     *
     * @return $this
     */
    public function setLpHolders($lp_holders)
    {
        $this->container['lp_holders'] = $lp_holders;

        return $this;
    }

    /**
     * Gets closable
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityClosable
     */
    public function getClosable()
    {
        return $this->container['closable'];
    }

    /**
     * Sets closable
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityClosable $closable closable
     *
     * @return $this
     */
    public function setClosable($closable)
    {
        $this->container['closable'] = $closable;

        return $this;
    }

    /**
     * Gets transfer_hook
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferHook[]
     */
    public function getTransferHook()
    {
        return $this->container['transfer_hook'];
    }

    /**
     * Sets transfer_hook
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferHook[] $transfer_hook If there is any external hook in the token programme.(Notice: Hook may block user from trading)
     *
     * @return $this
     */
    public function setTransferHook($transfer_hook)
    {
        $this->container['transfer_hook'] = $transfer_hook;

        return $this;
    }

    /**
     * Gets transfer_hook_upgradable
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferHookUpgradable
     */
    public function getTransferHookUpgradable()
    {
        return $this->container['transfer_hook_upgradable'];
    }

    /**
     * Sets transfer_hook_upgradable
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferHookUpgradable $transfer_hook_upgradable transfer_hook_upgradable
     *
     * @return $this
     */
    public function setTransferHookUpgradable($transfer_hook_upgradable)
    {
        $this->container['transfer_hook_upgradable'] = $transfer_hook_upgradable;

        return $this;
    }

    /**
     * Gets trusted_token
     *
     * @return int
     */
    public function getTrustedToken()
    {
        return $this->container['trusted_token'];
    }

    /**
     * Sets trusted_token
     *
     * @param int $trusted_token If the token is a famous and trustworthy one. \"1\" means yes.
     *
     * @return $this
     */
    public function setTrustedToken($trusted_token)
    {
        $this->container['trusted_token'] = $trusted_token;

        return $this;
    }

    /**
     * Gets default_account_state_upgradable
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable
     */
    public function getDefaultAccountStateUpgradable()
    {
        return $this->container['default_account_state_upgradable'];
    }

    /**
     * Sets default_account_state_upgradable
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable $default_account_state_upgradable default_account_state_upgradable
     *
     * @return $this
     */
    public function setDefaultAccountStateUpgradable($default_account_state_upgradable)
    {
        $this->container['default_account_state_upgradable'] = $default_account_state_upgradable;

        return $this;
    }

    /**
     * Gets none_transferable
     *
     * @return string
     */
    public function getNoneTransferable()
    {
        return $this->container['none_transferable'];
    }

    /**
     * Sets none_transferable
     *
     * @param string $none_transferable Indicates whether the token is non-transferable, \"1\" means non-transferable, \"0\" means transferable
     *
     * @return $this
     */
    public function setNoneTransferable($none_transferable)
    {
        $this->container['none_transferable'] = $none_transferable;

        return $this;
    }

    /**
     * Gets default_account_state
     *
     * @return string
     */
    public function getDefaultAccountState()
    {
        return $this->container['default_account_state'];
    }

    /**
     * Sets default_account_state
     *
     * @param string $default_account_state The default state of newly created accounts. \"0\" for Uninitialized, \"1\" for Initialized, \"2\" for Frozen.(Notice: Uninitialized (0): The token is newly created and not ready for use. It cannot perform any token operations and typically needs to be initialized to become active. Initialized (1): The token is fully ready for use and can engage in normal token transactions. Most token operations require the account to be in this state. Frozen (2): All the account that created whe the token is \"frozen\" would be locked and prohibited from performing any token transactions or operations, usually for security or compliance reasons, until it is manually unfrozen.)
     *
     * @return $this
     */
    public function setDefaultAccountState($default_account_state)
    {
        $this->container['default_account_state'] = $default_account_state;

        return $this;
    }

    /**
     * Gets mintable
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMintable
     */
    public function getMintable()
    {
        return $this->container['mintable'];
    }

    /**
     * Sets mintable
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMintable $mintable mintable
     *
     * @return $this
     */
    public function setMintable($mintable)
    {
        $this->container['mintable'] = $mintable;

        return $this;
    }

    /**
     * Gets balance_mutable_authority
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority
     */
    public function getBalanceMutableAuthority()
    {
        return $this->container['balance_mutable_authority'];
    }

    /**
     * Sets balance_mutable_authority
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority $balance_mutable_authority balance_mutable_authority
     *
     * @return $this
     */
    public function setBalanceMutableAuthority($balance_mutable_authority)
    {
        $this->container['balance_mutable_authority'] = $balance_mutable_authority;

        return $this;
    }

    /**
     * Gets transfer_fee
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferFee
     */
    public function getTransferFee()
    {
        return $this->container['transfer_fee'];
    }

    /**
     * Sets transfer_fee
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferFee $transfer_fee transfer_fee
     *
     * @return $this
     */
    public function setTransferFee($transfer_fee)
    {
        $this->container['transfer_fee'] = $transfer_fee;

        return $this;
    }

    /**
     * Gets holders
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityHolders[]
     */
    public function getHolders()
    {
        return $this->container['holders'];
    }

    /**
     * Sets holders
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityHolders[] $holders List of top 10 addresses holding the token and their balances.
     *
     * @return $this
     */
    public function setHolders($holders)
    {
        $this->container['holders'] = $holders;

        return $this;
    }

    /**
     * Gets freezable
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityFreezable
     */
    public function getFreezable()
    {
        return $this->container['freezable'];
    }

    /**
     * Sets freezable
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityFreezable $freezable freezable
     *
     * @return $this
     */
    public function setFreezable($freezable)
    {
        $this->container['freezable'] = $freezable;

        return $this;
    }

    /**
     * Gets metadata_mutable
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMetadataMutable
     */
    public function getMetadataMutable()
    {
        return $this->container['metadata_mutable'];
    }

    /**
     * Sets metadata_mutable
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMetadataMutable $metadata_mutable metadata_mutable
     *
     * @return $this
     */
    public function setMetadataMutable($metadata_mutable)
    {
        $this->container['metadata_mutable'] = $metadata_mutable;

        return $this;
    }

    /**
     * Gets dex
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDex[]
     */
    public function getDex()
    {
        return $this->container['dex'];
    }

    /**
     * Sets dex
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDex[] $dex Dex Info
     *
     * @return $this
     */
    public function setDex($dex)
    {
        $this->container['dex'] = $dex;

        return $this;
    }

    /**
     * Gets transfer_fee_upgradable
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable
     */
    public function getTransferFeeUpgradable()
    {
        return $this->container['transfer_fee_upgradable'];
    }

    /**
     * Sets transfer_fee_upgradable
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable $transfer_fee_upgradable transfer_fee_upgradable
     *
     * @return $this
     */
    public function setTransferFeeUpgradable($transfer_fee_upgradable)
    {
        $this->container['transfer_fee_upgradable'] = $transfer_fee_upgradable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
