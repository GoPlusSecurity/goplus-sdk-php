<?php
/**
 * SolanaPrerunTxResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoPlus Security API Document
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SolanaPrerunTxResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SolanaPrerunTxResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SolanaPrerunTxResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'input' => 'string',
        'asset_changes' => '\Swagger\Client\Model\SolanaTxAssetChanges',
        'risk_type' => 'int[]',
        'allowance_upgrades' => '\Swagger\Client\Model\SolanaAllowanceUpgrade[]',
        'ownership_changes' => '\Swagger\Client\Model\SolanaOwnershipChange[]',
        'sender' => 'string',
        'transaction_fee' => 'string',
        'risky_txn' => 'string',
        'error' => 'string',
        'logs' => 'string[]',
        'risk_detail' => 'string[]',
        'slot_height' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'input' => null,
        'asset_changes' => null,
        'risk_type' => 'int32',
        'allowance_upgrades' => null,
        'ownership_changes' => null,
        'sender' => null,
        'transaction_fee' => null,
        'risky_txn' => null,
        'error' => null,
        'logs' => null,
        'risk_detail' => null,
        'slot_height' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'input',
        'asset_changes' => 'asset_changes',
        'risk_type' => 'risk_type',
        'allowance_upgrades' => 'allowance_upgrades',
        'ownership_changes' => 'ownership_changes',
        'sender' => 'sender',
        'transaction_fee' => 'transaction_fee',
        'risky_txn' => 'risky_txn',
        'error' => 'error',
        'logs' => 'logs',
        'risk_detail' => 'risk_detail',
        'slot_height' => 'slot_height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
        'asset_changes' => 'setAssetChanges',
        'risk_type' => 'setRiskType',
        'allowance_upgrades' => 'setAllowanceUpgrades',
        'ownership_changes' => 'setOwnershipChanges',
        'sender' => 'setSender',
        'transaction_fee' => 'setTransactionFee',
        'risky_txn' => 'setRiskyTxn',
        'error' => 'setError',
        'logs' => 'setLogs',
        'risk_detail' => 'setRiskDetail',
        'slot_height' => 'setSlotHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
        'asset_changes' => 'getAssetChanges',
        'risk_type' => 'getRiskType',
        'allowance_upgrades' => 'getAllowanceUpgrades',
        'ownership_changes' => 'getOwnershipChanges',
        'sender' => 'getSender',
        'transaction_fee' => 'getTransactionFee',
        'risky_txn' => 'getRiskyTxn',
        'error' => 'getError',
        'logs' => 'getLogs',
        'risk_detail' => 'getRiskDetail',
        'slot_height' => 'getSlotHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = isset($data['input']) ? $data['input'] : null;
        $this->container['asset_changes'] = isset($data['asset_changes']) ? $data['asset_changes'] : null;
        $this->container['risk_type'] = isset($data['risk_type']) ? $data['risk_type'] : null;
        $this->container['allowance_upgrades'] = isset($data['allowance_upgrades']) ? $data['allowance_upgrades'] : null;
        $this->container['ownership_changes'] = isset($data['ownership_changes']) ? $data['ownership_changes'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['transaction_fee'] = isset($data['transaction_fee']) ? $data['transaction_fee'] : null;
        $this->container['risky_txn'] = isset($data['risky_txn']) ? $data['risky_txn'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['logs'] = isset($data['logs']) ? $data['logs'] : null;
        $this->container['risk_detail'] = isset($data['risk_detail']) ? $data['risk_detail'] : null;
        $this->container['slot_height'] = isset($data['slot_height']) ? $data['slot_height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input
     *
     * @return string
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string $input input
     *
     * @return $this
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets asset_changes
     *
     * @return \Swagger\Client\Model\SolanaTxAssetChanges
     */
    public function getAssetChanges()
    {
        return $this->container['asset_changes'];
    }

    /**
     * Sets asset_changes
     *
     * @param \Swagger\Client\Model\SolanaTxAssetChanges $asset_changes asset_changes
     *
     * @return $this
     */
    public function setAssetChanges($asset_changes)
    {
        $this->container['asset_changes'] = $asset_changes;

        return $this;
    }

    /**
     * Gets risk_type
     *
     * @return int[]
     */
    public function getRiskType()
    {
        return $this->container['risk_type'];
    }

    /**
     * Sets risk_type
     *
     * @param int[] $risk_type risk_type
     *
     * @return $this
     */
    public function setRiskType($risk_type)
    {
        $this->container['risk_type'] = $risk_type;

        return $this;
    }

    /**
     * Gets allowance_upgrades
     *
     * @return \Swagger\Client\Model\SolanaAllowanceUpgrade[]
     */
    public function getAllowanceUpgrades()
    {
        return $this->container['allowance_upgrades'];
    }

    /**
     * Sets allowance_upgrades
     *
     * @param \Swagger\Client\Model\SolanaAllowanceUpgrade[] $allowance_upgrades allowance_upgrades
     *
     * @return $this
     */
    public function setAllowanceUpgrades($allowance_upgrades)
    {
        $this->container['allowance_upgrades'] = $allowance_upgrades;

        return $this;
    }

    /**
     * Gets ownership_changes
     *
     * @return \Swagger\Client\Model\SolanaOwnershipChange[]
     */
    public function getOwnershipChanges()
    {
        return $this->container['ownership_changes'];
    }

    /**
     * Sets ownership_changes
     *
     * @param \Swagger\Client\Model\SolanaOwnershipChange[] $ownership_changes ownership_changes
     *
     * @return $this
     */
    public function setOwnershipChanges($ownership_changes)
    {
        $this->container['ownership_changes'] = $ownership_changes;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets transaction_fee
     *
     * @return string
     */
    public function getTransactionFee()
    {
        return $this->container['transaction_fee'];
    }

    /**
     * Sets transaction_fee
     *
     * @param string $transaction_fee transaction_fee
     *
     * @return $this
     */
    public function setTransactionFee($transaction_fee)
    {
        $this->container['transaction_fee'] = $transaction_fee;

        return $this;
    }

    /**
     * Gets risky_txn
     *
     * @return string
     */
    public function getRiskyTxn()
    {
        return $this->container['risky_txn'];
    }

    /**
     * Sets risky_txn
     *
     * @param string $risky_txn risky_txn
     *
     * @return $this
     */
    public function setRiskyTxn($risky_txn)
    {
        $this->container['risky_txn'] = $risky_txn;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return string[]
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param string[] $logs logs
     *
     * @return $this
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets risk_detail
     *
     * @return string[]
     */
    public function getRiskDetail()
    {
        return $this->container['risk_detail'];
    }

    /**
     * Sets risk_detail
     *
     * @param string[] $risk_detail risk_detail
     *
     * @return $this
     */
    public function setRiskDetail($risk_detail)
    {
        $this->container['risk_detail'] = $risk_detail;

        return $this;
    }

    /**
     * Gets slot_height
     *
     * @return int
     */
    public function getSlotHeight()
    {
        return $this->container['slot_height'];
    }

    /**
     * Sets slot_height
     *
     * @param int $slot_height slot_height
     *
     * @return $this
     */
    public function setSlotHeight($slot_height)
    {
        $this->container['slot_height'] = $slot_height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
