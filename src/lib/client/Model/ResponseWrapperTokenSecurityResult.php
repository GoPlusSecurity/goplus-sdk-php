<?php
/**
 * ResponseWrapperTokenSecurityResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoPlus Security API Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseWrapperTokenSecurityResult Class Doc Comment
 *
 * @category Class
 * @description key is contract address
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseWrapperTokenSecurityResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseWrapperTokenSecurity_result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'note' => 'string',
'lp_total_supply' => 'string',
'lp_holders' => '\Swagger\Client\Model\ResponseWrapperTokenSecurityLpHolders[]',
'is_airdrop_scam' => 'string',
'other_potential_risks' => 'string',
'transfer_pausable' => 'string',
'trading_cooldown' => 'string',
'hidden_owner' => 'string',
'selfdestruct' => 'string',
'owner_percent' => 'string',
'is_whitelisted' => 'string',
'holder_count' => 'string',
'trust_list' => 'string',
'is_honeypot' => 'string',
'holders' => '\Swagger\Client\Model\ResponseWrapperTokenSecurityLpHolders[]',
'dex' => '\Swagger\Client\Model\ResponseWrapperTokenSecurityDex[]',
'is_open_source' => 'string',
'sell_tax' => 'string',
'token_name' => 'string',
'creator_address' => 'string',
'creator_percent' => 'string',
'is_proxy' => 'string',
'creator_balance' => 'string',
'is_in_dex' => 'string',
'owner_balance' => 'string',
'total_supply' => 'string',
'is_true_token' => 'string',
'can_take_back_ownership' => 'string',
'is_blacklisted' => 'string',
'owner_address' => 'string',
'slippage_modifiable' => 'string',
'buy_tax' => 'string',
'external_call' => 'string',
'cannot_sell_all' => 'string',
'lp_holder_count' => 'string',
'personal_slippage_modifiable' => 'string',
'is_anti_whale' => 'string',
'is_mintable' => 'string',
'owner_change_balance' => 'string',
'cannot_buy' => 'string',
'anti_whale_modifiable' => 'string',
'token_symbol' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'note' => null,
'lp_total_supply' => null,
'lp_holders' => null,
'is_airdrop_scam' => null,
'other_potential_risks' => null,
'transfer_pausable' => null,
'trading_cooldown' => null,
'hidden_owner' => null,
'selfdestruct' => null,
'owner_percent' => null,
'is_whitelisted' => null,
'holder_count' => null,
'trust_list' => null,
'is_honeypot' => null,
'holders' => null,
'dex' => null,
'is_open_source' => null,
'sell_tax' => null,
'token_name' => null,
'creator_address' => null,
'creator_percent' => null,
'is_proxy' => null,
'creator_balance' => null,
'is_in_dex' => null,
'owner_balance' => null,
'total_supply' => null,
'is_true_token' => null,
'can_take_back_ownership' => null,
'is_blacklisted' => null,
'owner_address' => null,
'slippage_modifiable' => null,
'buy_tax' => null,
'external_call' => null,
'cannot_sell_all' => null,
'lp_holder_count' => null,
'personal_slippage_modifiable' => null,
'is_anti_whale' => null,
'is_mintable' => null,
'owner_change_balance' => null,
'cannot_buy' => null,
'anti_whale_modifiable' => null,
'token_symbol' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'note' => 'note',
'lp_total_supply' => 'lp_total_supply',
'lp_holders' => 'lp_holders',
'is_airdrop_scam' => 'is_airdrop_scam',
'other_potential_risks' => 'other_potential_risks',
'transfer_pausable' => 'transfer_pausable',
'trading_cooldown' => 'trading_cooldown',
'hidden_owner' => 'hidden_owner',
'selfdestruct' => 'selfdestruct',
'owner_percent' => 'owner_percent',
'is_whitelisted' => 'is_whitelisted',
'holder_count' => 'holder_count',
'trust_list' => 'trust_list',
'is_honeypot' => 'is_honeypot',
'holders' => 'holders',
'dex' => 'dex',
'is_open_source' => 'is_open_source',
'sell_tax' => 'sell_tax',
'token_name' => 'token_name',
'creator_address' => 'creator_address',
'creator_percent' => 'creator_percent',
'is_proxy' => 'is_proxy',
'creator_balance' => 'creator_balance',
'is_in_dex' => 'is_in_dex',
'owner_balance' => 'owner_balance',
'total_supply' => 'total_supply',
'is_true_token' => 'is_true_token',
'can_take_back_ownership' => 'can_take_back_ownership',
'is_blacklisted' => 'is_blacklisted',
'owner_address' => 'owner_address',
'slippage_modifiable' => 'slippage_modifiable',
'buy_tax' => 'buy_tax',
'external_call' => 'external_call',
'cannot_sell_all' => 'cannot_sell_all',
'lp_holder_count' => 'lp_holder_count',
'personal_slippage_modifiable' => 'personal_slippage_modifiable',
'is_anti_whale' => 'is_anti_whale',
'is_mintable' => 'is_mintable',
'owner_change_balance' => 'owner_change_balance',
'cannot_buy' => 'cannot_buy',
'anti_whale_modifiable' => 'anti_whale_modifiable',
'token_symbol' => 'token_symbol'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'note' => 'setNote',
'lp_total_supply' => 'setLpTotalSupply',
'lp_holders' => 'setLpHolders',
'is_airdrop_scam' => 'setIsAirdropScam',
'other_potential_risks' => 'setOtherPotentialRisks',
'transfer_pausable' => 'setTransferPausable',
'trading_cooldown' => 'setTradingCooldown',
'hidden_owner' => 'setHiddenOwner',
'selfdestruct' => 'setSelfdestruct',
'owner_percent' => 'setOwnerPercent',
'is_whitelisted' => 'setIsWhitelisted',
'holder_count' => 'setHolderCount',
'trust_list' => 'setTrustList',
'is_honeypot' => 'setIsHoneypot',
'holders' => 'setHolders',
'dex' => 'setDex',
'is_open_source' => 'setIsOpenSource',
'sell_tax' => 'setSellTax',
'token_name' => 'setTokenName',
'creator_address' => 'setCreatorAddress',
'creator_percent' => 'setCreatorPercent',
'is_proxy' => 'setIsProxy',
'creator_balance' => 'setCreatorBalance',
'is_in_dex' => 'setIsInDex',
'owner_balance' => 'setOwnerBalance',
'total_supply' => 'setTotalSupply',
'is_true_token' => 'setIsTrueToken',
'can_take_back_ownership' => 'setCanTakeBackOwnership',
'is_blacklisted' => 'setIsBlacklisted',
'owner_address' => 'setOwnerAddress',
'slippage_modifiable' => 'setSlippageModifiable',
'buy_tax' => 'setBuyTax',
'external_call' => 'setExternalCall',
'cannot_sell_all' => 'setCannotSellAll',
'lp_holder_count' => 'setLpHolderCount',
'personal_slippage_modifiable' => 'setPersonalSlippageModifiable',
'is_anti_whale' => 'setIsAntiWhale',
'is_mintable' => 'setIsMintable',
'owner_change_balance' => 'setOwnerChangeBalance',
'cannot_buy' => 'setCannotBuy',
'anti_whale_modifiable' => 'setAntiWhaleModifiable',
'token_symbol' => 'setTokenSymbol'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'note' => 'getNote',
'lp_total_supply' => 'getLpTotalSupply',
'lp_holders' => 'getLpHolders',
'is_airdrop_scam' => 'getIsAirdropScam',
'other_potential_risks' => 'getOtherPotentialRisks',
'transfer_pausable' => 'getTransferPausable',
'trading_cooldown' => 'getTradingCooldown',
'hidden_owner' => 'getHiddenOwner',
'selfdestruct' => 'getSelfdestruct',
'owner_percent' => 'getOwnerPercent',
'is_whitelisted' => 'getIsWhitelisted',
'holder_count' => 'getHolderCount',
'trust_list' => 'getTrustList',
'is_honeypot' => 'getIsHoneypot',
'holders' => 'getHolders',
'dex' => 'getDex',
'is_open_source' => 'getIsOpenSource',
'sell_tax' => 'getSellTax',
'token_name' => 'getTokenName',
'creator_address' => 'getCreatorAddress',
'creator_percent' => 'getCreatorPercent',
'is_proxy' => 'getIsProxy',
'creator_balance' => 'getCreatorBalance',
'is_in_dex' => 'getIsInDex',
'owner_balance' => 'getOwnerBalance',
'total_supply' => 'getTotalSupply',
'is_true_token' => 'getIsTrueToken',
'can_take_back_ownership' => 'getCanTakeBackOwnership',
'is_blacklisted' => 'getIsBlacklisted',
'owner_address' => 'getOwnerAddress',
'slippage_modifiable' => 'getSlippageModifiable',
'buy_tax' => 'getBuyTax',
'external_call' => 'getExternalCall',
'cannot_sell_all' => 'getCannotSellAll',
'lp_holder_count' => 'getLpHolderCount',
'personal_slippage_modifiable' => 'getPersonalSlippageModifiable',
'is_anti_whale' => 'getIsAntiWhale',
'is_mintable' => 'getIsMintable',
'owner_change_balance' => 'getOwnerChangeBalance',
'cannot_buy' => 'getCannotBuy',
'anti_whale_modifiable' => 'getAntiWhaleModifiable',
'token_symbol' => 'getTokenSymbol'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['lp_total_supply'] = isset($data['lp_total_supply']) ? $data['lp_total_supply'] : null;
        $this->container['lp_holders'] = isset($data['lp_holders']) ? $data['lp_holders'] : null;
        $this->container['is_airdrop_scam'] = isset($data['is_airdrop_scam']) ? $data['is_airdrop_scam'] : null;
        $this->container['other_potential_risks'] = isset($data['other_potential_risks']) ? $data['other_potential_risks'] : null;
        $this->container['transfer_pausable'] = isset($data['transfer_pausable']) ? $data['transfer_pausable'] : null;
        $this->container['trading_cooldown'] = isset($data['trading_cooldown']) ? $data['trading_cooldown'] : null;
        $this->container['hidden_owner'] = isset($data['hidden_owner']) ? $data['hidden_owner'] : null;
        $this->container['selfdestruct'] = isset($data['selfdestruct']) ? $data['selfdestruct'] : null;
        $this->container['owner_percent'] = isset($data['owner_percent']) ? $data['owner_percent'] : null;
        $this->container['is_whitelisted'] = isset($data['is_whitelisted']) ? $data['is_whitelisted'] : null;
        $this->container['holder_count'] = isset($data['holder_count']) ? $data['holder_count'] : null;
        $this->container['trust_list'] = isset($data['trust_list']) ? $data['trust_list'] : null;
        $this->container['is_honeypot'] = isset($data['is_honeypot']) ? $data['is_honeypot'] : null;
        $this->container['holders'] = isset($data['holders']) ? $data['holders'] : null;
        $this->container['dex'] = isset($data['dex']) ? $data['dex'] : null;
        $this->container['is_open_source'] = isset($data['is_open_source']) ? $data['is_open_source'] : null;
        $this->container['sell_tax'] = isset($data['sell_tax']) ? $data['sell_tax'] : null;
        $this->container['token_name'] = isset($data['token_name']) ? $data['token_name'] : null;
        $this->container['creator_address'] = isset($data['creator_address']) ? $data['creator_address'] : null;
        $this->container['creator_percent'] = isset($data['creator_percent']) ? $data['creator_percent'] : null;
        $this->container['is_proxy'] = isset($data['is_proxy']) ? $data['is_proxy'] : null;
        $this->container['creator_balance'] = isset($data['creator_balance']) ? $data['creator_balance'] : null;
        $this->container['is_in_dex'] = isset($data['is_in_dex']) ? $data['is_in_dex'] : null;
        $this->container['owner_balance'] = isset($data['owner_balance']) ? $data['owner_balance'] : null;
        $this->container['total_supply'] = isset($data['total_supply']) ? $data['total_supply'] : null;
        $this->container['is_true_token'] = isset($data['is_true_token']) ? $data['is_true_token'] : null;
        $this->container['can_take_back_ownership'] = isset($data['can_take_back_ownership']) ? $data['can_take_back_ownership'] : null;
        $this->container['is_blacklisted'] = isset($data['is_blacklisted']) ? $data['is_blacklisted'] : null;
        $this->container['owner_address'] = isset($data['owner_address']) ? $data['owner_address'] : null;
        $this->container['slippage_modifiable'] = isset($data['slippage_modifiable']) ? $data['slippage_modifiable'] : null;
        $this->container['buy_tax'] = isset($data['buy_tax']) ? $data['buy_tax'] : null;
        $this->container['external_call'] = isset($data['external_call']) ? $data['external_call'] : null;
        $this->container['cannot_sell_all'] = isset($data['cannot_sell_all']) ? $data['cannot_sell_all'] : null;
        $this->container['lp_holder_count'] = isset($data['lp_holder_count']) ? $data['lp_holder_count'] : null;
        $this->container['personal_slippage_modifiable'] = isset($data['personal_slippage_modifiable']) ? $data['personal_slippage_modifiable'] : null;
        $this->container['is_anti_whale'] = isset($data['is_anti_whale']) ? $data['is_anti_whale'] : null;
        $this->container['is_mintable'] = isset($data['is_mintable']) ? $data['is_mintable'] : null;
        $this->container['owner_change_balance'] = isset($data['owner_change_balance']) ? $data['owner_change_balance'] : null;
        $this->container['cannot_buy'] = isset($data['cannot_buy']) ? $data['cannot_buy'] : null;
        $this->container['anti_whale_modifiable'] = isset($data['anti_whale_modifiable']) ? $data['anti_whale_modifiable'] : null;
        $this->container['token_symbol'] = isset($data['token_symbol']) ? $data['token_symbol'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note It describes whether the contract has other things investors need to know.  Example:  \"note”: “Contract owner is a multisign contract.”(Notice:(1) If we haven't found any other thing which is valuable yet, there will be no return.  (2) Type: string.)
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets lp_total_supply
     *
     * @return string
     */
    public function getLpTotalSupply()
    {
        return $this->container['lp_total_supply'];
    }

    /**
     * Sets lp_total_supply
     *
     * @param string $lp_total_supply It describes the supply number of the LP token. Example:\"lp_total_supply\": \"100000000\". No return means no LP.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return.  (2) It is LP token number, NOT token number)
     *
     * @return $this
     */
    public function setLpTotalSupply($lp_total_supply)
    {
        $this->container['lp_total_supply'] = $lp_total_supply;

        return $this;
    }

    /**
     * Gets lp_holders
     *
     * @return \Swagger\Client\Model\ResponseWrapperTokenSecurityLpHolders[]
     */
    public function getLpHolders()
    {
        return $this->container['lp_holders'];
    }

    /**
     * Sets lp_holders
     *
     * @param \Swagger\Client\Model\ResponseWrapperTokenSecurityLpHolders[] $lp_holders Top10 LP token holders info(Notice:When \"is_in_dex\": \"0\", there will be no return. )
     *
     * @return $this
     */
    public function setLpHolders($lp_holders)
    {
        $this->container['lp_holders'] = $lp_holders;

        return $this;
    }

    /**
     * Gets is_airdrop_scam
     *
     * @return string
     */
    public function getIsAirdropScam()
    {
        return $this->container['is_airdrop_scam'];
    }

    /**
     * Sets is_airdrop_scam
     *
     * @param string $is_airdrop_scam It describes whether the token is an airdrop scam. \"1\" means true; \"0\" means false; None means no result (Because We did not find conclusive information on whether token is an airdrop scam).(Notice:Only \"is_airdrop_scam\": \"1\" means it is an airdrop scam.)
     *
     * @return $this
     */
    public function setIsAirdropScam($is_airdrop_scam)
    {
        $this->container['is_airdrop_scam'] = $is_airdrop_scam;

        return $this;
    }

    /**
     * Gets other_potential_risks
     *
     * @return string
     */
    public function getOtherPotentialRisks()
    {
        return $this->container['other_potential_risks'];
    }

    /**
     * Sets other_potential_risks
     *
     * @param string $other_potential_risks It describes whether the contract has other potential risks. Example: “other_potential_risks”: “Owner can set different transaction taxes for each user, which can trigger serious losses.”(Notice:(1) If we haven't found any other potential risk yet, there will be no return.  (2) Type: string.)
     *
     * @return $this
     */
    public function setOtherPotentialRisks($other_potential_risks)
    {
        $this->container['other_potential_risks'] = $other_potential_risks;

        return $this;
    }

    /**
     * Gets transfer_pausable
     *
     * @return string
     */
    public function getTransferPausable()
    {
        return $this->container['transfer_pausable'];
    }

    /**
     * Sets transfer_pausable
     *
     * @param string $transfer_pausable It describes whether trading can be pausable by token contract. \"1\" means true; \"0\" means false; No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) This feature means that the contract owner will be able to suspend trading at any time, after that anyone will not be able to sell, except those who have special authority.  (4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)
     *
     * @return $this
     */
    public function setTransferPausable($transfer_pausable)
    {
        $this->container['transfer_pausable'] = $transfer_pausable;

        return $this;
    }

    /**
     * Gets trading_cooldown
     *
     * @return string
     */
    public function getTradingCooldown()
    {
        return $this->container['trading_cooldown'];
    }

    /**
     * Sets trading_cooldown
     *
     * @param string $trading_cooldown It describes whether the contract has trading-cool-down mechanism which can limits the minimum time between two transactions. \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. (2) Sometimes, when \"is_proxy\": \"1\", there will be no return. )
     *
     * @return $this
     */
    public function setTradingCooldown($trading_cooldown)
    {
        $this->container['trading_cooldown'] = $trading_cooldown;

        return $this;
    }

    /**
     * Gets hidden_owner
     *
     * @return string
     */
    public function getHiddenOwner()
    {
        return $this->container['hidden_owner'];
    }

    /**
     * Sets hidden_owner
     *
     * @param string $hidden_owner It describes whether the contract has hidden owners. For contract with a hidden owner, developer can still manipulate the contract even if the ownership has been abandoned. “1” means true; \"0\" means false; No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Hidden owner is often used by developers to hide ownership and is often accompanied by malicious functionality. When the hidden owner exists, it is assumed that ownership has not been abandoned.)
     *
     * @return $this
     */
    public function setHiddenOwner($hidden_owner)
    {
        $this->container['hidden_owner'] = $hidden_owner;

        return $this;
    }

    /**
     * Gets selfdestruct
     *
     * @return string
     */
    public function getSelfdestruct()
    {
        return $this->container['selfdestruct'];
    }

    /**
     * Sets selfdestruct
     *
     * @param string $selfdestruct It describes whether this contract can self destruct. \"1\" means true;  \"0\" means false; No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) When the self-destruct function is triggered, this contract will be destroyed, all functions will be unavailable, and all related assets will be erased.)
     *
     * @return $this
     */
    public function setSelfdestruct($selfdestruct)
    {
        $this->container['selfdestruct'] = $selfdestruct;

        return $this;
    }

    /**
     * Gets owner_percent
     *
     * @return string
     */
    public function getOwnerPercent()
    {
        return $this->container['owner_percent'];
    }

    /**
     * Sets owner_percent
     *
     * @param string $owner_percent It describes the percentage of tokens held by the contract owner.  Example:\"owner_balance\": \"0.1\".  No return or return empty means there is no ownership or can't find ownership.(Notice:(1) 1 means 100% here. (2) When \"owner_address\" returns empty, or no return, there will be no return.)
     *
     * @return $this
     */
    public function setOwnerPercent($owner_percent)
    {
        $this->container['owner_percent'] = $owner_percent;

        return $this;
    }

    /**
     * Gets is_whitelisted
     *
     * @return string
     */
    public function getIsWhitelisted()
    {
        return $this->container['is_whitelisted'];
    }

    /**
     * Sets is_whitelisted
     *
     * @param string $is_whitelisted It describes whether the whitelist function is not included in the contract. If there is a whitelist, some addresses may not be able to trade normally. \"1\" means true; \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Whitelisting is mostly used to allow specific addresses to make early transactions, tax-free, and not affected by transaction suspension. (4) For contracts without an owner (or the owner is a black hole address), the whitelist will not be able to get updated. However, the existing whitelist is still in effect.)
     *
     * @return $this
     */
    public function setIsWhitelisted($is_whitelisted)
    {
        $this->container['is_whitelisted'] = $is_whitelisted;

        return $this;
    }

    /**
     * Gets holder_count
     *
     * @return string
     */
    public function getHolderCount()
    {
        return $this->container['holder_count'];
    }

    /**
     * Sets holder_count
     *
     * @param string $holder_count It describes the number of token holders. Example:\"holder_count\": \"4342\"
     *
     * @return $this
     */
    public function setHolderCount($holder_count)
    {
        $this->container['holder_count'] = $holder_count;

        return $this;
    }

    /**
     * Gets trust_list
     *
     * @return string
     */
    public function getTrustList()
    {
        return $this->container['trust_list'];
    }

    /**
     * Sets trust_list
     *
     * @param string $trust_list It describes whether the token is a famous and trustworthy one. \"1\" means true; No return no result (Because We did not find conclusive information on whether token is a airdrop scam).(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy token.  (2) No return doesn't mean it is risky.)
     *
     * @return $this
     */
    public function setTrustList($trust_list)
    {
        $this->container['trust_list'] = $trust_list;

        return $this;
    }

    /**
     * Gets is_honeypot
     *
     * @return string
     */
    public function getIsHoneypot()
    {
        return $this->container['is_honeypot'];
    }

    /**
     * Sets is_honeypot
     *
     * @param string $is_honeypot It describes whether the token is a honeypot. \"HoneyPot\" means that the token maybe cannot be sold because of the token contract's function, Or the token contains malicious code.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Hight risk, definitely scam.)
     *
     * @return $this
     */
    public function setIsHoneypot($is_honeypot)
    {
        $this->container['is_honeypot'] = $is_honeypot;

        return $this;
    }

    /**
     * Gets holders
     *
     * @return \Swagger\Client\Model\ResponseWrapperTokenSecurityLpHolders[]
     */
    public function getHolders()
    {
        return $this->container['holders'];
    }

    /**
     * Sets holders
     *
     * @param \Swagger\Client\Model\ResponseWrapperTokenSecurityLpHolders[] $holders Top10 holders info
     *
     * @return $this
     */
    public function setHolders($holders)
    {
        $this->container['holders'] = $holders;

        return $this;
    }

    /**
     * Gets dex
     *
     * @return \Swagger\Client\Model\ResponseWrapperTokenSecurityDex[]
     */
    public function getDex()
    {
        return $this->container['dex'];
    }

    /**
     * Sets dex
     *
     * @param \Swagger\Client\Model\ResponseWrapperTokenSecurityDex[] $dex It describes Dex information of where the token that can be traded.(Notice:When \"is_in_dex\": \"0\", there will be empty array. )
     *
     * @return $this
     */
    public function setDex($dex)
    {
        $this->container['dex'] = $dex;

        return $this;
    }

    /**
     * Gets is_open_source
     *
     * @return string
     */
    public function getIsOpenSource()
    {
        return $this->container['is_open_source'];
    }

    /**
     * Sets is_open_source
     *
     * @param string $is_open_source It describes whether this contract is open source.  \"1\" means true;  \"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)
     *
     * @return $this
     */
    public function setIsOpenSource($is_open_source)
    {
        $this->container['is_open_source'] = $is_open_source;

        return $this;
    }

    /**
     * Gets sell_tax
     *
     * @return string
     */
    public function getSellTax()
    {
        return $this->container['sell_tax'];
    }

    /**
     * Sets sell_tax
     *
     * @param string $sell_tax It describes the tax when selling the token.  Example: \"sell_tax\": 0.1%.  No return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return.  (2) Sell tax will cause the actual value received when selling a token to be less than expected, and too much buy tax may lead to large losses. (3) When \"sell_tax\": \"1\", it means sell-tax is 100% or this token cannot be sold. (4) Sometimes token's  trading-cool-down mechanism would affect our sandbox system. When \"trading_cooldown\": \"1\", \"sell_tax\" may return \"1\".)
     *
     * @return $this
     */
    public function setSellTax($sell_tax)
    {
        $this->container['sell_tax'] = $sell_tax;

        return $this;
    }

    /**
     * Gets token_name
     *
     * @return string
     */
    public function getTokenName()
    {
        return $this->container['token_name'];
    }

    /**
     * Sets token_name
     *
     * @param string $token_name Token Name
     *
     * @return $this
     */
    public function setTokenName($token_name)
    {
        $this->container['token_name'] = $token_name;

        return $this;
    }

    /**
     * Gets creator_address
     *
     * @return string
     */
    public function getCreatorAddress()
    {
        return $this->container['creator_address'];
    }

    /**
     * Sets creator_address
     *
     * @param string $creator_address It describes this contract's owner address.  Example: \"creator_address\": \"0x744aF9cBb7606BB040f6FBf1c0a0B0dcBA6385E5\";
     *
     * @return $this
     */
    public function setCreatorAddress($creator_address)
    {
        $this->container['creator_address'] = $creator_address;

        return $this;
    }

    /**
     * Gets creator_percent
     *
     * @return string
     */
    public function getCreatorPercent()
    {
        return $this->container['creator_percent'];
    }

    /**
     * Sets creator_percent
     *
     * @param string $creator_percent It describes the percentage of tokens held by the contract owner. Example:\"owner_balance\": 0.1.(Notice:1 means 100% here.)
     *
     * @return $this
     */
    public function setCreatorPercent($creator_percent)
    {
        $this->container['creator_percent'] = $creator_percent;

        return $this;
    }

    /**
     * Gets is_proxy
     *
     * @return string
     */
    public function getIsProxy()
    {
        return $this->container['is_proxy'];
    }

    /**
     * Sets is_proxy
     *
     * @param string $is_proxy It describes whether this contract has a proxy contract.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk. When the contract is a Proxy, we will stop detecting other risk items.)
     *
     * @return $this
     */
    public function setIsProxy($is_proxy)
    {
        $this->container['is_proxy'] = $is_proxy;

        return $this;
    }

    /**
     * Gets creator_balance
     *
     * @return string
     */
    public function getCreatorBalance()
    {
        return $this->container['creator_balance'];
    }

    /**
     * Sets creator_balance
     *
     * @param string $creator_balance It describes the balance of the contract owner.  Example:\"owner_balance\": 100000000.
     *
     * @return $this
     */
    public function setCreatorBalance($creator_balance)
    {
        $this->container['creator_balance'] = $creator_balance;

        return $this;
    }

    /**
     * Gets is_in_dex
     *
     * @return string
     */
    public function getIsInDex()
    {
        return $this->container['is_in_dex'];
    }

    /**
     * Sets is_in_dex
     *
     * @param string $is_in_dex It describes whether the token can be traded on the main Dex. \"1\" means true; \"0\" means false(Notice:It only counts when the token has a marketing pair with mainstream coins/tokens.)
     *
     * @return $this
     */
    public function setIsInDex($is_in_dex)
    {
        $this->container['is_in_dex'] = $is_in_dex;

        return $this;
    }

    /**
     * Gets owner_balance
     *
     * @return string
     */
    public function getOwnerBalance()
    {
        return $this->container['owner_balance'];
    }

    /**
     * Sets owner_balance
     *
     * @param string $owner_balance It describes the balance of the contract owner.  Example: \"owner_balance\": \"100000000\".  No return or return empty means there is no ownership or can't find ownership.(Notice:When \"owner_address\" returns empty, or no return, there will be no return.)
     *
     * @return $this
     */
    public function setOwnerBalance($owner_balance)
    {
        $this->container['owner_balance'] = $owner_balance;

        return $this;
    }

    /**
     * Gets total_supply
     *
     * @return string
     */
    public function getTotalSupply()
    {
        return $this->container['total_supply'];
    }

    /**
     * Sets total_supply
     *
     * @param string $total_supply It describes the supply number of the token. Example:\"total_supply\": 100000000
     *
     * @return $this
     */
    public function setTotalSupply($total_supply)
    {
        $this->container['total_supply'] = $total_supply;

        return $this;
    }

    /**
     * Gets is_true_token
     *
     * @return string
     */
    public function getIsTrueToken()
    {
        return $this->container['is_true_token'];
    }

    /**
     * Sets is_true_token
     *
     * @param string $is_true_token It describes whether the token is true or fake. \"1\" means true token; \"0\" means fake token; None means no result (Because we did not find decisive information about the truth or falsity)(Notice:Only \"is_true_token\": \"0\" means it is a fake token.)
     *
     * @return $this
     */
    public function setIsTrueToken($is_true_token)
    {
        $this->container['is_true_token'] = $is_true_token;

        return $this;
    }

    /**
     * Gets can_take_back_ownership
     *
     * @return string
     */
    public function getCanTakeBackOwnership()
    {
        return $this->container['can_take_back_ownership'];
    }

    /**
     * Sets can_take_back_ownership
     *
     * @param string $can_take_back_ownership It describes whether this contract has the function to take back ownership.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Ownership is mostly used to adjust the parameters and status of the contract, such as minting, modification of slippage, suspension of trading, setting blacklsit, etc.  When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, these functions will most likely be disabled.)
     *
     * @return $this
     */
    public function setCanTakeBackOwnership($can_take_back_ownership)
    {
        $this->container['can_take_back_ownership'] = $can_take_back_ownership;

        return $this;
    }

    /**
     * Gets is_blacklisted
     *
     * @return string
     */
    public function getIsBlacklisted()
    {
        return $this->container['is_blacklisted'];
    }

    /**
     * Sets is_blacklisted
     *
     * @param string $is_blacklisted It describes whether the blacklist function is not included in the contract. If there is a blacklist, some addresses may not be able to trade normally. \"1\" means true; \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\",  there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) The contract owner may add any address into the blacklist, and the token holder in blacklist will not be able to trade. Abuse of the blacklist function will lead to great risks.  (4) For contracts without an owner (or the owner is a black hole address), the blacklist will not be able to get updated. However, the existing blacklist is still in effect.)
     *
     * @return $this
     */
    public function setIsBlacklisted($is_blacklisted)
    {
        $this->container['is_blacklisted'] = $is_blacklisted;

        return $this;
    }

    /**
     * Gets owner_address
     *
     * @return string
     */
    public function getOwnerAddress()
    {
        return $this->container['owner_address'];
    }

    /**
     * Sets owner_address
     *
     * @param string $owner_address It describes this contract's owner address.  Example: \"owner_address\": \"0x744aF9cBb7606BB040f6FBf1c0a0B0dcBA6385E5\";  No return means unknown; Return empty means there is no ownership or can't find ownership.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Ownership is mostly used to adjust the parameters and status of the contract, such as minting, modification of slippage, suspension of trading, setting blacklist, etc.  When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, these functions will most likely be disabled.)
     *
     * @return $this
     */
    public function setOwnerAddress($owner_address)
    {
        $this->container['owner_address'] = $owner_address;

        return $this;
    }

    /**
     * Gets slippage_modifiable
     *
     * @return string
     */
    public function getSlippageModifiable()
    {
        return $this->container['slippage_modifiable'];
    }

    /**
     * Sets slippage_modifiable
     *
     * @param string $slippage_modifiable It describes whether the trading tax can be modifiable by token contract. \"1\" means true; \"0\" means false; No return means unknown.(Notice:(1) When When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Token with modifiable tax means that the contract owner can modify the buy tax or sell tax of the token. This may cause some losses, especially since some contracts have unlimited modifiable tax rates, which would make the token untradeable.  (4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)
     *
     * @return $this
     */
    public function setSlippageModifiable($slippage_modifiable)
    {
        $this->container['slippage_modifiable'] = $slippage_modifiable;

        return $this;
    }

    /**
     * Gets buy_tax
     *
     * @return string
     */
    public function getBuyTax()
    {
        return $this->container['buy_tax'];
    }

    /**
     * Sets buy_tax
     *
     * @param string $buy_tax It describes the tax when buying the token.  Example: \"buy_tax\": 0.1%.  No return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return.  (2) Buy tax will cause the actual value received when buying a token to be less than expected, and too much buy tax may lead to heavy losses. (3) When \"buy_tax\": \"1\", it means buy tax is 100% or cannot buy. (4) Sometimes token's anti-bot mechanism would affect our sandbox system, leading to \"cannoy_buy\": \"1\",  causing the display of \"buy_tax\": \"1\". (5)Some of the token is deisgned not for sale, leading to \"cannot_buy\":1, causing the display of \"buy_tax\": \"1\".)
     *
     * @return $this
     */
    public function setBuyTax($buy_tax)
    {
        $this->container['buy_tax'] = $buy_tax;

        return $this;
    }

    /**
     * Gets external_call
     *
     * @return string
     */
    public function getExternalCall()
    {
        return $this->container['external_call'];
    }

    /**
     * Sets external_call
     *
     * @param string $external_call It describes whether the contract would call functions of other contracts when primary methods are executed. \"1\" means true;  \"0\" means false; No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) External call would cause the implementation of this contract to be highly dependent on other external contracts, which may be a potential risk.)
     *
     * @return $this
     */
    public function setExternalCall($external_call)
    {
        $this->container['external_call'] = $external_call;

        return $this;
    }

    /**
     * Gets cannot_sell_all
     *
     * @return string
     */
    public function getCannotSellAll()
    {
        return $this->container['cannot_sell_all'];
    }

    /**
     * Sets cannot_sell_all
     *
     * @param string $cannot_sell_all It describes whether the contract has the function restricting token holder selling all the token.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return.  (2) This feature means that you will not be able to sell all your tokens in a single sale. Sometimes you need to leave a certain percentage of the token, e.g. 10%, sometimes you need to leave a fixed number of token, such as 10 token. (3) When \"buy_tax\": \"1\", there will be no return.)
     *
     * @return $this
     */
    public function setCannotSellAll($cannot_sell_all)
    {
        $this->container['cannot_sell_all'] = $cannot_sell_all;

        return $this;
    }

    /**
     * Gets lp_holder_count
     *
     * @return string
     */
    public function getLpHolderCount()
    {
        return $this->container['lp_holder_count'];
    }

    /**
     * Sets lp_holder_count
     *
     * @param string $lp_holder_count It describes the number of LP token holders. Example:\"lp_holder_count\": \"4342\". No return means no LP.(Notice:When \"is_in_dex\": \"0\", there will be no return.)
     *
     * @return $this
     */
    public function setLpHolderCount($lp_holder_count)
    {
        $this->container['lp_holder_count'] = $lp_holder_count;

        return $this;
    }

    /**
     * Gets personal_slippage_modifiable
     *
     * @return string
     */
    public function getPersonalSlippageModifiable()
    {
        return $this->container['personal_slippage_modifiable'];
    }

    /**
     * Sets personal_slippage_modifiable
     *
     * @param string $personal_slippage_modifiable It describes whether the owner can set a different tax rate for every assigned address. \"1\" means ture; \"0\" means false; No return means unknown.(Notice:(1) When \"is_open_source\": \"0\",  there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) The contract owner may set a very outrageous tax rate for assigned address to block it from trading. Abuse of this funtcion will lead to great risks.  (4) For contracts without an owner (or the owner is a black hole address), this function would not able to be used. However, the existing tax rate would be still in effect.)
     *
     * @return $this
     */
    public function setPersonalSlippageModifiable($personal_slippage_modifiable)
    {
        $this->container['personal_slippage_modifiable'] = $personal_slippage_modifiable;

        return $this;
    }

    /**
     * Gets is_anti_whale
     *
     * @return string
     */
    public function getIsAntiWhale()
    {
        return $this->container['is_anti_whale'];
    }

    /**
     * Sets is_anti_whale
     *
     * @param string $is_anti_whale It describes whether the contract has the function to limit the maximum amount of transactions or the maximum token position that for single address.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. (2) Sometimes, when \"is_proxy\": \"1\", there will be no return. )
     *
     * @return $this
     */
    public function setIsAntiWhale($is_anti_whale)
    {
        $this->container['is_anti_whale'] = $is_anti_whale;

        return $this;
    }

    /**
     * Gets is_mintable
     *
     * @return string
     */
    public function getIsMintable()
    {
        return $this->container['is_mintable'];
    }

    /**
     * Sets is_mintable
     *
     * @param string $is_mintable It describes whether this contract has the function to mint tokens.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Mint function will directly trigger a massive sell-off, causing the coin price to plummet. It is extremely risky.  (4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)
     *
     * @return $this
     */
    public function setIsMintable($is_mintable)
    {
        $this->container['is_mintable'] = $is_mintable;

        return $this;
    }

    /**
     * Gets owner_change_balance
     *
     * @return string
     */
    public function getOwnerChangeBalance()
    {
        return $this->container['owner_change_balance'];
    }

    /**
     * Sets owner_change_balance
     *
     * @param string $owner_change_balance It describes whether the contract owner has the authority to change the balance of any token holder.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.  (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3) Token with this feature means that the owner can modify anyone's balance, resulting in an asset straight to zero or a massive minting and sell-off.  (4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)
     *
     * @return $this
     */
    public function setOwnerChangeBalance($owner_change_balance)
    {
        $this->container['owner_change_balance'] = $owner_change_balance;

        return $this;
    }

    /**
     * Gets cannot_buy
     *
     * @return string
     */
    public function getCannotBuy()
    {
        return $this->container['cannot_buy'];
    }

    /**
     * Sets cannot_buy
     *
     * @param string $cannot_buy It deiscribes whether the Token can be bought. \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) Generally, \"cannot_buy\": \"1\" would be found in Reward Tokens. Such Tokens are issued as rewards for some on-chain applications and cannot be bought directly by users. (2) Sometimes token's anti-bot mechanism would affect our sandbox system, causing the display of \"buy_tax\": \"1\". (3) When “cannot_buy”: \"1\", our sandbox system might be bloked, causing the display of \"buy_tax\": \"1\" and \"sell_tax\": \"1\")
     *
     * @return $this
     */
    public function setCannotBuy($cannot_buy)
    {
        $this->container['cannot_buy'] = $cannot_buy;

        return $this;
    }

    /**
     * Gets anti_whale_modifiable
     *
     * @return string
     */
    public function getAntiWhaleModifiable()
    {
        return $this->container['anti_whale_modifiable'];
    }

    /**
     * Sets anti_whale_modifiable
     *
     * @param string $anti_whale_modifiable It describes whether the contract has the function to modify the maximum amount of transactions or the maximum token position.  \"1\" means true;  \"0\" means false;  No return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. (2) Sometimes, when \"is_proxy\": \"1\", there will be no return.  (3)When the anti whale value is set to a very small value, all tradinge would fail.)
     *
     * @return $this
     */
    public function setAntiWhaleModifiable($anti_whale_modifiable)
    {
        $this->container['anti_whale_modifiable'] = $anti_whale_modifiable;

        return $this;
    }

    /**
     * Gets token_symbol
     *
     * @return string
     */
    public function getTokenSymbol()
    {
        return $this->container['token_symbol'];
    }

    /**
     * Sets token_symbol
     *
     * @param string $token_symbol Token Symbol
     *
     * @return $this
     */
    public function setTokenSymbol($token_symbol)
    {
        $this->container['token_symbol'] = $token_symbol;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
