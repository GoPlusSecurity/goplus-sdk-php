<?php
/**
 * ResponseWrapperSolanaTokenSecurityDex
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoPlus Security API Document
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseWrapperSolanaTokenSecurityDex Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseWrapperSolanaTokenSecurityDex implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResponseWrapperSolanaTokenSecurity_dex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'week' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityWeek',
        'month' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMonth',
        'price' => 'string',
        'open_time' => 'string',
        'id' => 'string',
        'tvl' => 'string',
        'type' => 'string',
        'dex_name' => 'string',
        'day' => '\Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDay',
        'burn_percent' => 'float',
        'lp_amount' => 'string',
        'fee_rate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'week' => null,
        'month' => null,
        'price' => null,
        'open_time' => null,
        'id' => null,
        'tvl' => null,
        'type' => null,
        'dex_name' => null,
        'day' => null,
        'burn_percent' => null,
        'lp_amount' => null,
        'fee_rate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'week' => 'week',
        'month' => 'month',
        'price' => 'price',
        'open_time' => 'open_time',
        'id' => 'id',
        'tvl' => 'tvl',
        'type' => 'type',
        'dex_name' => 'dex_name',
        'day' => 'day',
        'burn_percent' => 'burn_percent',
        'lp_amount' => 'lp_amount',
        'fee_rate' => 'fee_rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'week' => 'setWeek',
        'month' => 'setMonth',
        'price' => 'setPrice',
        'open_time' => 'setOpenTime',
        'id' => 'setId',
        'tvl' => 'setTvl',
        'type' => 'setType',
        'dex_name' => 'setDexName',
        'day' => 'setDay',
        'burn_percent' => 'setBurnPercent',
        'lp_amount' => 'setLpAmount',
        'fee_rate' => 'setFeeRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'week' => 'getWeek',
        'month' => 'getMonth',
        'price' => 'getPrice',
        'open_time' => 'getOpenTime',
        'id' => 'getId',
        'tvl' => 'getTvl',
        'type' => 'getType',
        'dex_name' => 'getDexName',
        'day' => 'getDay',
        'burn_percent' => 'getBurnPercent',
        'lp_amount' => 'getLpAmount',
        'fee_rate' => 'getFeeRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['week'] = isset($data['week']) ? $data['week'] : null;
        $this->container['month'] = isset($data['month']) ? $data['month'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['open_time'] = isset($data['open_time']) ? $data['open_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['tvl'] = isset($data['tvl']) ? $data['tvl'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['dex_name'] = isset($data['dex_name']) ? $data['dex_name'] : null;
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['burn_percent'] = isset($data['burn_percent']) ? $data['burn_percent'] : null;
        $this->container['lp_amount'] = isset($data['lp_amount']) ? $data['lp_amount'] : null;
        $this->container['fee_rate'] = isset($data['fee_rate']) ? $data['fee_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets week
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityWeek
     */
    public function getWeek()
    {
        return $this->container['week'];
    }

    /**
     * Sets week
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityWeek $week week
     *
     * @return $this
     */
    public function setWeek($week)
    {
        $this->container['week'] = $week;

        return $this;
    }

    /**
     * Gets month
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMonth
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityMonth $month month
     *
     * @return $this
     */
    public function setMonth($month)
    {
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Current price (Unitless, count by two tokens in the pool).
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets open_time
     *
     * @return string
     */
    public function getOpenTime()
    {
        return $this->container['open_time'];
    }

    /**
     * Sets open_time
     *
     * @param string $open_time The epoch when trading is opened.
     *
     * @return $this
     */
    public function setOpenTime($open_time)
    {
        $this->container['open_time'] = $open_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Address of the liquidity pool.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tvl
     *
     * @return string
     */
    public function getTvl()
    {
        return $this->container['tvl'];
    }

    /**
     * Sets tvl
     *
     * @param string $tvl Total value locked (TVL) in the liquidity pool.
     *
     * @return $this
     */
    public function setTvl($tvl)
    {
        $this->container['tvl'] = $tvl;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the DEX, could be \"standard\" or \"concentrated\".
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets dex_name
     *
     * @return string
     */
    public function getDexName()
    {
        return $this->container['dex_name'];
    }

    /**
     * Sets dex_name
     *
     * @param string $dex_name Name of the DEX.
     *
     * @return $this
     */
    public function setDexName($dex_name)
    {
        $this->container['dex_name'] = $dex_name;

        return $this;
    }

    /**
     * Gets day
     *
     * @return \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDay
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param \Swagger\Client\Model\ResponseWrapperSolanaTokenSecurityDay $day day
     *
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets burn_percent
     *
     * @return float
     */
    public function getBurnPercent()
    {
        return $this->container['burn_percent'];
    }

    /**
     * Sets burn_percent
     *
     * @param float $burn_percent Percentage of burned LP
     *
     * @return $this
     */
    public function setBurnPercent($burn_percent)
    {
        $this->container['burn_percent'] = $burn_percent;

        return $this;
    }

    /**
     * Gets lp_amount
     *
     * @return string
     */
    public function getLpAmount()
    {
        return $this->container['lp_amount'];
    }

    /**
     * Sets lp_amount
     *
     * @param string $lp_amount Total amount of liquidity provider tokens, only shown when type is \"standard\"
     *
     * @return $this
     */
    public function setLpAmount($lp_amount)
    {
        $this->container['lp_amount'] = $lp_amount;

        return $this;
    }

    /**
     * Gets fee_rate
     *
     * @return string
     */
    public function getFeeRate()
    {
        return $this->container['fee_rate'];
    }

    /**
     * Sets fee_rate
     *
     * @param string $fee_rate Transaction fee rate.
     *
     * @return $this
     */
    public function setFeeRate($fee_rate)
    {
        $this->container['fee_rate'] = $fee_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
